/** * Created by Hoshiko on 11/4/15. */public class CircularNode {    CircularNode next;    String data;    public CircularNode(String data) { this.data = data; }}class CircularList {    CircularNode head;    public void addToHead(String data) {        if (isEmpty()) {            addToEmptyList(data);            return;        }        CircularNode newNode = new CircularNode(data);        CircularNode lastNode = findLastNode();        lastNode.next = newNode;        newNode.next = head;        head = newNode;    }    public void addToTail(String data) {        if (isEmpty()) {            addToEmptyList(data);            return;        }        CircularNode newNode = new CircularNode(data);        CircularNode lastNode = findLastNode();        lastNode.next = newNode;        newNode.next = head;    }    public boolean insertAfter(String prevData, String newData) {        if (isEmpty()) return false;        CircularNode currNode = head;        do {            if (currNode.data.equals(prevData)) {                CircularNode newNode = new CircularNode(newData);                newNode.next = currNode.next;                currNode.next = newNode;                return true;            }            currNode = currNode.next;        }        while (currNode != head);        return false;    }//    public void update(String oldData, String newData) {//        CircularNode current = head;//        while (current != null && !current.data.equals(oldData)) {//            current = current.next;//        }//        if (current != null) {//            current.data = newData;//        }//    }    public boolean delete(String data) {        if (isEmpty()) return false;        if(head.data.equals(data)) {            CircularNode lastNode = findLastNode();            lastNode.next = head.next;            head = head.next;            return true;        }        CircularNode prevNode = head;        CircularNode currNode = head.next;        while (currNode != head) {            if (currNode.data.equals(data)) {                prevNode.next = currNode.next;                return true;            }            prevNode = currNode;            currNode = currNode.next;        }        return false;    }    private boolean isEmpty() {        return head == null;    }    private void addToEmptyList(String data) {        CircularNode newNode = new CircularNode(data);        head = newNode;        newNode.next = head;    }    private CircularNode findLastNode() {        CircularNode currNode = head;        while (currNode.next != head) {            currNode = currNode.next;        }        return currNode;    }    public void print() {        CircularNode current = head;        while(current != null){            System.out.print(current.data + ",");            current = current.next;        }        System.out.println();    }}